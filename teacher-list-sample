Here is an example prompt:

====================================================

I am a beginner Google Apps Script coder. I need a Google Apps Script that creates a Google Form with a dropdown list of teachers. The teacher data is stored in a Google Sheet named 'Teacher List'. This script should dynamically update the form whenever the data in the sheet changes.

**Here's how it should work:**

* **Data Source:** 'Teacher List' sheet with columns: Teacher Last Name, Teacher First Name, Teacher Full Name, Teacher Email.
* **Form Creation:**
    * Create a form titled 'Teacher Selection Form' with a single dropdown item titled "Teacher Name".
    * Populate the dropdown with "Teacher Full Name" from the sheet, sorted alphabetically by last name, then first name.
    * **Important:** Store the ID of this "Teacher Name" dropdown item in the 'Config' sheet.
    * Store the full URL of the created form in the 'Config' sheet. This URL will be used to access the form for updates.
* **Dynamic Updates:**
    * The script must be able to update the form's dropdown whenever the teacher list in the Google Sheet is modified (names added, deleted, or edited). This means the form should always reflect the current data in the sheet.
* **Error Handling:**
    * Include specific error handling for cases where the form or the "Teacher Name" list item cannot be found, using the stored IDs to verify.

**Additional Requirements:**

* **Custom Menu:** The script will be run from a Google Sheet. Please include code to add a custom menu to the Google Sheet with the following options:
    * "Teacher Dropdown":
        * Authorize Script: This option should be visible only if the script requires authorization.
        * Create Template: This option would create the "Teacher List" sheet and the "Config" sheet.
        * Generate Form: This would create the Google Form as described above.
        * Update Form: This would update the form's dropdown with the latest data from the sheet.
* **Code Optimization:**
    1. Thoroughly comment all parts of the script. Explain what each function and section does.
    2. Use try/catch blocks for error handling. This will make debugging easier.
    3. Use the Logger service to log activity. This will help me understand what the script is doing.
    4. Minimize calls to external services. This will improve performance.
    5. Use batch operations when possible. This will also improve performance.
    6. Avoid adding libraries if possible. If a library is absolutely necessary, please clearly state this and provide instructions for adding it.
    7. Use the Cache service if appropriate. This can help speed up the script.
    8. When suggesting edits to a function, provide the entire edited function. This makes it easier to implement the changes.
    9. Use consistent indentation with [number] spaces.
    10. Use meaningful variable and function names.
    11. Group related code together.
    12. Avoid unnecessary calculations and data fetching.
    13. Optimize loops and use array methods where possible.
    14. Provide specific and informative error messages.
    15. Use defensive programming techniques to prevent errors.
    16. Handle sensitive data responsibly and follow privacy guidelines.
    17. Use the least privileged authorization scopes.
    18. Write modular code with reusable functions.
    19. Add clear documentation for complex logic. 

Please generate the Apps Script code following these guidelines.
