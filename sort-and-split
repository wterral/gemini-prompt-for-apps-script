// This was the starting prompt that was not as efficient as it could have been. 

<prompt1>Using Google Apps Script, create a script that will run on the current Google Spreadsheet sheet. The sheet contains columns for Email, First Name, Last Name, Teacher, and STATUS. When the script is run, create a new sheet for each TEACHER and populate that with the First Name, Last Name, and Email for each row containing that teacher's data. When the process is completed, write "DONE" to the STATUS column for that row. Use best practices for efficient code.</prompt1>

// After many iterations and finally getting some working code, I asked Gemini how the prompt could have been worded to get to the end result more efficiently:

<prompt2>

Create a Google Apps Script to automate the following task on a Google Sheet:

Identify Unique Teachers: Extract unique teacher names from column D.
Create New Sheets: For each unique teacher, create a new sheet with the teacher's name.
Populate New Sheets: Copy the corresponding student data (first name, last name, and email) from the original sheet to the newly created sheet.
Format New Sheets: Freeze the first row and bold the header row.
Update Original Sheet: Mark the processed rows in the original sheet's "STATUS" column (column E) as "DONE".

Additional Considerations:

Empty Rows: Remove any empty rows from the new sheets.
Error Handling: Implement error handling to gracefully handle situations like empty teacher names or sheet creation failures.
Logging: Include detailed logging to track the script's execution and debug any issues.
User Interface: Create a custom menu to trigger the script from within the spreadsheet.

</prompt2>

// To get the sample data for the starting sheet

<sample-data>
Provide a table of sample data for the starting sheet. Include 3 to 6 students for each of 5 teachers. 
</sample-data>
