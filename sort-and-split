// This was the starting prompt that was not as efficient as it could have been. 

<prompt1>Using Google Apps Script, create a script that will run on the current Google Spreadsheet sheet. The sheet contains columns for Email, First Name, Last Name, Teacher, and STATUS. When the script is run, create a new sheet for each TEACHER and populate that with the First Name, Last Name, and Email for each row containing that teacher's data. When the process is completed, write "DONE" to the STATUS column for that row. Use best practices for efficient code.</prompt1>

// After many iterations and finally getting some working code, I asked Gemini how the prompt could have been worded to get to the end result more efficiently. NOTE - This prompt, while more complete, still resulted in code that did not work out of the box.

<prompt2>

Prompt: Create a Google Apps Script to Automate Teacher Sheet Generation
Objective: This script will automate the creation of individual teacher sheets from a master sheet containing student information.

Functionality:

Create an Add-on Menu: Upon opening the spreadsheet, a menu item named "Create Teacher Sheets" will be added.
Process Teacher Data: When the menu item is clicked, the script will:
Extract teacher names from a specific column (e.g., column D) in the current sheet, starting from row 2 (excluding headers).
Identify unique teacher names.
Loop through each unique teacher name:
Check if a sheet already exists with that name. If not, create a new sheet.
Extract student data associated with that teacher (based on a matching criteria, e.g., column E) from the master sheet.
Filter out empty rows from the extracted data.
Create headers ("First Name", "Last Name", "Email") in the newly created teacher sheet.
Populate the teacher sheet with the filtered student data (corresponding columns need to be identified, e.g., columns B, C, and A).
Freeze the first row and format the header row (bold).
Update a "STATUS" column (e.g., column E) in the original sheet with "DONE" for processed student rows.
Logging: Throughout the script execution, informative messages will be logged using Logger.log for debugging and tracking progress.
Additional Considerations:

Specify the column number(s) containing teacher names and student data in the master sheet.
Adjust the script to handle scenarios where sheets might already exist with the same names as teachers. (e.g., append a number or prompt the user for confirmation)
Consider adding error handling for situations where unexpected data formats are encountered.
Benefits:

This script automates a repetitive task, saving teachers time and reducing the risk of errors in manually creating and populating individual student sheets.

</prompt2>

// To get the sample data for the starting sheet

<sample-data>
Provide a table of sample data for the starting sheet. Include 3 to 6 students for each of 5 teachers. Do not number the rows or columns. 
</sample-data>
