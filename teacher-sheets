I am a beginner Google Apps Script coder. I need a script that:

Identifies unique teachers: Extracts distinct teacher names from a specified column.
Creates new sheets: For each unique teacher, generates a new sheet with the teacher's name.
Populates new sheets: Copies relevant student data (name, email) from the original sheet to the newly created sheets.
Removes empty rows: Deletes any empty rows from the new sheets.
Formats new sheets: Freezes the header row and applies bold formatting to it.
Updates original sheet: Marks processed rows as "DONE" in the original sheet's "STATUS" column.
The script enhances efficiency by streamlining these tasks and reducing manual effort..

Here's how the script should work:

* **Data Source:** The Google Apps Script processes a Google Sheet containing student data: Column A is Email; Column B is First Name; Column C is Last Name; Teacher is in Column D; STATUS is Column E. For each unique teacher, the script creates a new sheet, populates it with relevant student information (name and email), removes empty rows, and formats the header row. The script then updates the original sheet, marking processed rows as "DONE" in the "STATUS" column. This automation simplifies the task of organizing and categorizing student data based on their respective teachers.
* **Process:** The Google Apps Script automates the process of organizing and categorizing student data within a Google Sheet. It begins by extracting unique teacher names from a designated column. For each identified teacher, the script creates a new sheet, populates it with student information relevant to that teacher, and removes any empty rows. To ensure clarity and easy reference, the header row of each new sheet is formatted with bold text. Finally, the script returns to the original sheet and marks the processed rows as "DONE" in the "STATUS" column. This streamlined approach eliminates the need for manual data sorting and categorization, saving time and effort.
* **Output:** The script's output consists of multiple Google Sheets. The original sheet remains intact, but with an additional "STATUS" column to track processed rows. For each unique teacher identified, a new sheet is created. These new sheets contain student data relevant to the respective teacher, including their names and email addresses. Empty rows are removed from these new sheets to maintain a clean and organized format. Additionally, the header row of each new sheet is formatted with bold text to enhance readability. This automated process effectively organizes and categorizes student data, making it easier to manage and analyze.

Please generate the Apps Script code following these guidelines:

1. **Thoroughly comment all parts of the script.** Explain what each function and section does.
2. **Use try/catch blocks for error handling.** This will make debugging easier.
3. **Use const as the keyword for variables that will not change. Use let for variables that can be reassigned another value. Do not use var to create variables.**
4. **Use the Logger service to log activity.** This will help me understand what the script is doing.
5. **Minimize calls to external services.** This will improve performance.
6. **Use batch operations when possible.** This will also improve performance.
7. **Avoid adding libraries if possible.** If a library is absolutely necessary, please clearly state this and provide instructions for adding it.
8. **Use the Cache service if appropriate.** This can help speed up the script.
9. **When suggesting edits to a function, provide the entire edited function.** This makes it easier to implement the changes.
10. **Use consistent indentation with [number] spaces.**
11. **Use meaningful variable and function names.**
12. **Group related code together.**
13. **Avoid unnecessary calculations and data fetching.**
14. **Optimize loops and use array methods where possible.**
15. **Provide specific and informative error messages.**
16. **Use defensive programming techniques to prevent errors.**
17. **Handle sensitive data responsibly and follow privacy guidelines.**
18. **Use the least privileged authorization scopes.**
19. **Write modular code with reusable functions.**
20. **Add clear documentation for complex logic.**
21. **Formatting for Google Sheet templates should have the first row frozen, bolded, with a gray background. Set column widths to 250 pixels. Wrap text in all cells. Remove any extra columns. Remove any rows over 100.**
22. **When creating custom menus, suggest a concise but catchy name for this tool.**
23. **When a service is needed that is not a core service in Apps Script, provide that information at the top of the script and let the user know it needs to be enabled and why.**

**Additional Requirements:**

* **Data Creation:** If the script requires specific data to function, please include a function to create the necessary files (e.g., a Google Sheet with the required columns).
* **Custom Menu:** The script will be run from a Google Sheet. Please include code to add a custom menu to the Google Sheet with the following options:
    * **Authorize Script:** This option should be visible only if the script requires authorization.
    * [Add any other menu items needed to run the script's functions]
    * 
